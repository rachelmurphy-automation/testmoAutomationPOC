"use strict";
/*
 * Copyright (c) Testmo GmbH (Berlin, Germany)
 * All rights reserved.
 * contact@testmo.com - www.testmo.com
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutomationResourcesAddFieldCommand = void 0;
var commander = __importStar(require("commander"));
var command_1 = require("../core/command");
var automationResourcesAddField_1 = require("../controller/automationResourcesAddField");
var AutomationResourcesAddFieldCommand = /** @class */ (function (_super) {
    __extends(AutomationResourcesAddFieldCommand, _super);
    function AutomationResourcesAddFieldCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'automation:resources:add-field';
        _this.description = 'Adds a new field to the local resource file to be submitted with an automation run';
        _this.help = "You can include additional resources such as custom fields, links and\nartifacts with automation runs. To make it easier to submit these resources,\nuse the automation:resources:* commands to prepare a local JSON file.\n\nWhen you then call one of the automation:run:* commands, you can specify\nthe resources file with the --resources option. All previously written\nfields, links and artifacts in this file are then submitted with the run.\n\nBy default this command adds a new field to a local testmo-resources.json\nfile if no other filename is specified. If the file does not exist yet,\nit is automatically created.\n\nNote: you can either add short string/URL fields or longer fields (displayed\nin Testmo as text, console output or rendered HTML). Values for short\nstring/URL fields need to be specified with the --value option. For text,\nconsole and HTML fields, pass the field value via stdin (see second example\nbelow).";
        _this.examples = "You can write a new string/URL fields to the resource file like this:\n\n$ testmo automation:resources:add-field \\\n    --type string \\\n    --name \"Version\" \\\n    --value \"2.3.1-5fbcc8d0\"\n\nFor text, console and HTML fields, make sure to pipe the field value via\nstdin, e.g. from a file:\n\n$ cat files.txt | testmo automation:resources:add-field \\\n    --type console \\\n    --name \"File list\"";
        return _this;
    }
    AutomationResourcesAddFieldCommand.prototype.buildCommand = function () {
        var command = new commander.Command(this.name);
        command.requiredOption('--type <type>', 'Required: Either string, url, text, console, html');
        command.requiredOption('--name <name>', 'Required: The name of this field');
        command.option('--value <string|url>', 'Value for string or URL fields; use stdin for text, console or HTML');
        command.requiredOption('--resources <file>', 'The JSON file this field is written to', 'testmo-resources.json');
        return command;
    };
    AutomationResourcesAddFieldCommand.prototype.run = function (commandOptions, commonOptions, subCommand) {
        return __awaiter(this, void 0, void 0, function () {
            var controller;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        controller = new automationResourcesAddField_1.AutomationResourcesAddField();
                        return [4 /*yield*/, controller.run({
                                type: this.trimRequiredArgument(commandOptions.type),
                                name: this.trimRequiredArgument(commandOptions.name),
                                value: this.trimOptionalArgument(commandOptions.value),
                                resourceFile: this.trimRequiredArgument(commandOptions.resources),
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, 0];
                }
            });
        });
    };
    return AutomationResourcesAddFieldCommand;
}(command_1.Command));
exports.AutomationResourcesAddFieldCommand = AutomationResourcesAddFieldCommand;
