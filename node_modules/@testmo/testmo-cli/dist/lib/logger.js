"use strict";
/*
 * Copyright (c) Testmo GmbH (Berlin, Germany)
 * All rights reserved.
 * contact@testmo.com - www.testmo.com
 */
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.LogLevel = void 0;
/* eslint-disable no-unused-vars, no-shadow, no-console */
var chalk_1 = __importDefault(require("chalk"));
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Debug"] = 0] = "Debug";
    LogLevel[LogLevel["Info"] = 1] = "Info";
    LogLevel[LogLevel["Warning"] = 2] = "Warning";
    LogLevel[LogLevel["Error"] = 3] = "Error";
    LogLevel[LogLevel["Silent"] = 4] = "Silent";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var Logger = /** @class */ (function () {
    function Logger(level, ansi) {
        if (level === void 0) { level = LogLevel.Info; }
        if (ansi === void 0) { ansi = false; }
        this.level = level;
        this.ansi = ansi;
    }
    Logger.prototype.debug = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.level <= LogLevel.Debug) {
            if (this.ansi) {
                console.log.apply(console, __spreadArray([chalk_1.default.yellow(message)], args, false));
            }
            else {
                console.log.apply(console, __spreadArray([message], args, false));
            }
        }
    };
    Logger.prototype.info = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.level <= LogLevel.Info) {
            console.log.apply(console, __spreadArray([message], args, false));
        }
    };
    Logger.prototype.warn = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.level <= LogLevel.Warning) {
            if (this.ansi) {
                console.warn.apply(console, __spreadArray([chalk_1.default.yellow(message)], args, false));
            }
            else {
                console.warn.apply(console, __spreadArray([message], args, false));
            }
        }
    };
    Logger.prototype.error = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.level <= LogLevel.Error) {
            if (this.ansi) {
                console.error.apply(console, __spreadArray([chalk_1.default.red(message)], args, false));
            }
            else {
                console.error.apply(console, __spreadArray([message], args, false));
            }
        }
    };
    Logger.prototype.stack = function (error) {
        if (this.level <= LogLevel.Debug) {
            if (this.ansi) {
                console.error(chalk_1.default.gray(error instanceof Error ? error.stack : error));
            }
            else {
                console.error(error instanceof Error ? error.stack : error);
            }
        }
    };
    Logger.prototype.exception = function (error) {
        if (this.level <= LogLevel.Error) {
            if (this.ansi) {
                console.error(chalk_1.default.red(error instanceof Error ? error.message : error));
            }
            else {
                console.error(error instanceof Error ? error.message : error);
            }
        }
        this.stack(error);
    };
    return Logger;
}());
exports.logger = new Logger();
