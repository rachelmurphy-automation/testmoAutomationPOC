"use strict";
/*
 * Copyright (c) Testmo GmbH (Berlin, Germany)
 * All rights reserved.
 * contact@testmo.com - www.testmo.com
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execPassthrough = void 0;
var child_process_1 = require("child_process");
function execPassthrough(argv, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var stdout, stderr, output, startTime, child;
        return __generator(this, function (_a) {
            if (argv.length == 0) {
                throw new Error('Empty exec arguments');
            }
            stdout = '';
            stderr = '';
            output = '';
            startTime = process.hrtime();
            child = (0, child_process_1.spawn)(argv[0], argv.slice(1), {
                stdio: ['inherit', 'pipe', 'pipe']
            });
            child.stdout.on('data', function (data) {
                stdout += data;
                output += data;
                if (options.pipeStdout !== undefined && options.pipeStdout) {
                    process.stdout.write(data);
                }
            });
            child.stderr.on('data', function (data) {
                stderr += data;
                output += data;
                if (options.pipeStderr !== undefined && options.pipeStderr) {
                    process.stderr.write(data);
                }
            });
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    child.once('error', function () {
                        reject(new Error('Failed to start process'));
                    });
                    child.once('exit', function (code, signal) {
                        var elapsed = process.hrtime(startTime);
                        resolve({
                            exitCode: code || 0,
                            stdout: stdout,
                            stderr: stderr,
                            output: output,
                            elapsed: (elapsed[0] * 1000000) + Math.round(elapsed[1] / 1000)
                        });
                    });
                })];
        });
    });
}
exports.execPassthrough = execPassthrough;
