"use strict";
/*
 * Copyright (c) Testmo GmbH (Berlin, Germany)
 * All rights reserved.
 * contact@testmo.com - www.testmo.com
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutomationRunSubmit = void 0;
var controller_1 = require("../core/controller");
var logger_1 = require("../lib/logger");
var errors_1 = require("../lib/errors");
var files_1 = require("../lib/files");
var exec_1 = require("../lib/exec");
var resources_1 = require("../core/resources");
var automation_1 = require("../core/automation");
var remote_1 = require("../core/remote");
var config_1 = require("../config");
var fs_1 = __importDefault(require("fs"));
var validator_1 = __importDefault(require("validator"));
var AutomationRunSubmit = /** @class */ (function (_super) {
    __extends(AutomationRunSubmit, _super);
    function AutomationRunSubmit() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AutomationRunSubmit.prototype.validate = function (options) {
        if (!validator_1.default.isInt(options.projectId, { min: 1 })) {
            throw new errors_1.ValidationError('Project ID needs to be a positive number');
        }
        if (validator_1.default.isEmpty(options.name)) {
            throw new errors_1.ValidationError('Name cannot be empty');
        }
        if (validator_1.default.isEmpty(options.source)) {
            throw new errors_1.ValidationError('Source cannot be empty');
        }
        if (!(0, automation_1.validateSource)(options.source)) {
            throw new errors_1.ValidationError('Invalid source name: needs to be a single word (with dashes allowed)');
        }
        if (options.tags !== undefined) {
            for (var _i = 0, _a = options.tags; _i < _a.length; _i++) {
                var tag = _a[_i];
                if (/[^\w-]/.test(tag)) {
                    throw new errors_1.ValidationError('Invalid tag name: only letters, numbers, underscore and dash allowed');
                }
            }
        }
        if (options.configId !== undefined) {
            if (!validator_1.default.isInt(options.configId, { min: 1 })) {
                throw new errors_1.ValidationError('Config ID needs to be a positive number');
            }
        }
        if (options.milestoneId !== undefined) {
            if (!validator_1.default.isInt(options.milestoneId, { min: 1 })) {
                throw new errors_1.ValidationError('Milestone ID needs to be a positive number');
            }
        }
    };
    AutomationRunSubmit.prototype.runExecutable = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var execResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger_1.logger.debug('Starting executable: ' + options.executableArgs.join(' '));
                        if (options.executableSuppressStdout) {
                            logger_1.logger.debug('Suppressing executable stdout');
                        }
                        return [4 /*yield*/, (0, exec_1.execPassthrough)(options.executableArgs, {
                                pipeStdout: !options.executableSuppressStdout,
                                pipeStderr: true
                            })];
                    case 1:
                        execResult = _a.sent();
                        if (options.onAfterExecute) {
                            options.onAfterExecute(execResult.elapsed, execResult.exitCode);
                        }
                        logger_1.logger.debug("Exit code of executable: ".concat(execResult.exitCode));
                        return [2 /*return*/, execResult];
                }
            });
        });
    };
    AutomationRunSubmit.prototype.collectResources = function (options) {
        var resources = new resources_1.Resources();
        if (options.resourceFile !== undefined) {
            if (!fs_1.default.existsSync(options.resourceFile)) {
                throw new Error("Resource file does not exist: ".concat(options.resourceFile));
            }
            logger_1.logger.debug("Reading resources from file: ".concat(options.resourceFile));
            resources.readFromFile(options.resourceFile);
            if (options.onAfterResources) {
                options.onAfterResources(resources);
            }
        }
        return resources;
    };
    AutomationRunSubmit.prototype.collectResults = function (options) {
        if (options.onBeforeCollect) {
            options.onBeforeCollect();
        }
        for (var _i = 0, _a = options.resultFiles; _i < _a.length; _i++) {
            var pattern = _a[_i];
            logger_1.logger.debug("Log pattern: ".concat(pattern));
        }
        var files = (0, files_1.resolveFiles)(options.resultFiles);
        for (var _b = 0, files_2 = files; _b < files_2.length; _b++) {
            var file = files_2[_b];
            logger_1.logger.debug("Resolved file: ".concat(file));
        }
        var results = new automation_1.AutomationRunResults(!options.ignoreParseError);
        var parsedFileCount = results.loadFromFiles(files);
        if (options.onAfterCollect) {
            options.onAfterCollect(parsedFileCount, results);
        }
        return results;
    };
    AutomationRunSubmit.prototype.run = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var execResult, resources, results, api, remoteRun, threadOptions, remoteThread, i, batchTests;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logControllerOptions(options);
                        options.testmoInstanceAddress = this.validateAndTruncateInstanceAddress(options.testmoInstanceAddress);
                        this.validate(options);
                        if (!(options.executableArgs.length > 0 && options.executableArgs[0].length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.runExecutable(options)];
                    case 1:
                        execResult = _a.sent();
                        if (options.executableStopOnError && execResult.exitCode != 0) {
                            logger_1.logger.debug("Stopping with failed child process exit code (".concat(execResult.exitCode, ")"));
                            return [2 /*return*/, execResult.exitCode];
                        }
                        _a.label = 2;
                    case 2:
                        resources = this.collectResources(options);
                        results = this.collectResults(options);
                        api = this.createAutomationRunsApi(options.testmoInstanceAddress, options.testmoApiToken);
                        return [4 /*yield*/, api.create(parseInt(options.projectId, 10), remote_1.RemoteAutomationRunCreate.fromOptions(options, resources))];
                    case 3:
                        remoteRun = _a.sent();
                        logger_1.logger.debug('Run', remoteRun);
                        if (options.onAfterRunCreate) {
                            options.onAfterRunCreate(remoteRun.id);
                        }
                        threadOptions = {
                            elapsedComputed: results.elapsed
                        };
                        if (execResult !== undefined) {
                            threadOptions.elapsedObserved = execResult.elapsed;
                            threadOptions.fields = [remote_1.RemoteAutomationField.fromExecPassthroughResult(options.executableArgs, execResult)];
                        }
                        return [4 /*yield*/, api.createThread(remoteRun.id, remote_1.RemoteAutomationThreadCreate.fromOptions(threadOptions))];
                    case 4:
                        remoteThread = _a.sent();
                        logger_1.logger.debug('Thread', remoteThread);
                        if (options.onAfterThreadCreate) {
                            options.onAfterThreadCreate(remoteThread.id);
                        }
                        // Submit tests to Testmo
                        if (options.onBeforeSubmit) {
                            options.onBeforeSubmit(results.tests.length);
                        }
                        i = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i < results.tests.length)) return [3 /*break*/, 8];
                        batchTests = results.tests.slice(i, i + config_1.config.testsPerBatch);
                        return [4 /*yield*/, api.appendToThread(remoteThread.id, remote_1.RemoteAutomationThreadAppend.fromOptions(batchTests))];
                    case 6:
                        _a.sent();
                        if (options.onSubmit) {
                            options.onSubmit(Math.min(i + config_1.config.testsPerBatch, results.tests.length), results.tests.length);
                        }
                        _a.label = 7;
                    case 7:
                        i += config_1.config.testsPerBatch;
                        return [3 /*break*/, 5];
                    case 8:
                        if (options.onAfterSubmit) {
                            options.onAfterSubmit(results.tests.length);
                        }
                        // Complete the run
                        return [4 /*yield*/, api.complete(remoteRun.id, remote_1.RemoteAutomationRunComplete.fromOptions({
                                measureElapsed: false
                            }))];
                    case 9:
                        // Complete the run
                        _a.sent();
                        if (options.onAfterRunComplete) {
                            options.onAfterRunComplete();
                        }
                        return [2 /*return*/, execResult !== undefined ? execResult.exitCode : 0];
                }
            });
        });
    };
    return AutomationRunSubmit;
}(controller_1.Controller));
exports.AutomationRunSubmit = AutomationRunSubmit;
