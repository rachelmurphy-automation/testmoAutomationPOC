"use strict";
/*
 * Copyright (c) Testmo GmbH (Berlin, Germany)
 * All rights reserved.
 * contact@testmo.com - www.testmo.com
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Controller = void 0;
var logger_1 = require("../lib/logger");
var errors_1 = require("../lib/errors");
var validator_1 = __importDefault(require("validator"));
var lodash_1 = __importDefault(require("lodash"));
// @ts-ignore
var testmo = __importStar(require("@testmo/testmo-api"));
var Controller = /** @class */ (function () {
    function Controller() {
    }
    Controller.prototype.logControllerOptions = function (options) {
        var debugOptions = lodash_1.default.clone(options);
        if (debugOptions.testmoApiToken !== undefined) {
            debugOptions.testmoApiToken = debugOptions.testmoApiToken.replace(/./g, '*');
        }
        logger_1.logger.debug('Controller options', debugOptions);
    };
    Controller.prototype.validateAndTruncateInstanceAddress = function (address) {
        if (validator_1.default.isEmpty(address)) {
            throw new errors_1.ValidationError('The Testmo instance address cannot be empty');
        }
        if (!validator_1.default.isURL(address)) {
            throw new errors_1.ValidationError('The Testmo instance address must be a valid URL');
        }
        if (!validator_1.default.isURL(address, { protocols: ['https'] })) {
            throw new errors_1.ValidationError('The Testmo instance address must use HTTPS');
        }
        return new URL(address).origin;
    };
    Controller.prototype.createAutomationRunsApi = function (address, token) {
        if (token === undefined || validator_1.default.isEmpty(token)) {
            throw new errors_1.ValidationError('Missing Testmo API token (TESTMO_TOKEN environment variable)');
        }
        var requestLogger = function (loggingRequest) {
            logger_1.logger.debug("Request: ".concat(loggingRequest.method, " ").concat(loggingRequest.url));
            loggingRequest.on('request', function (request) {
                logger_1.logger.debug('Request body', request._data || {});
            });
            loggingRequest.on('response', function (response) {
                logger_1.logger.debug("Response: ".concat(response.status));
            });
        };
        var client = new testmo.ApiClient();
        client.plugins = [requestLogger];
        client.basePath = address;
        client.authentications.bearerAuth.accessToken = token;
        return new testmo.AutomationRunsApi(client);
    };
    return Controller;
}());
exports.Controller = Controller;
