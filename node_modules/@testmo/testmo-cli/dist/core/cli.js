"use strict";
/*
 * Copyright (c) Testmo GmbH (Berlin, Germany)
 * All rights reserved.
 * contact@testmo.com - www.testmo.com
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cli = void 0;
var commander = __importStar(require("commander"));
var chalk_1 = __importDefault(require("chalk"));
var help_1 = require("../lib/help");
var commands_1 = require("../commands");
var logger_1 = require("../lib/logger");
var packageInfo = __importStar(require("../../package.json"));
var Cli = /** @class */ (function () {
    function Cli() {
        this.ansi = false;
    }
    Cli.prototype.printError = function (err) {
        var printApiError = function (apiError) {
            if (apiError.body && apiError.status) {
                var message = apiError.body.message || '';
                logger_1.logger.error("Server response (".concat(apiError.status, "): ").concat(message));
                switch (apiError.status) {
                    case 401:
                        logger_1.logger.error('Please verify your Testmo API token');
                        break;
                    case 422:
                        if ('errors' in apiError.body) {
                            for (var field in apiError.body.errors) {
                                if (Array.isArray(apiError.body.errors[field]) &&
                                    apiError.body.errors[field].length > 0) {
                                    logger_1.logger.error("Validation: ".concat(apiError.body.errors[field][0]));
                                }
                            }
                        }
                        break;
                }
                logger_1.logger.stack(apiError.error);
            }
            else {
                logger_1.logger.exception(apiError.error);
            }
        };
        if (err instanceof Error) {
            logger_1.logger.exception(err);
        }
        else if (err instanceof Object && 'response' in err && 'error' in err) {
            printApiError(err);
        }
        else if (err instanceof Object && 'error' in err &&
            err.error instanceof Error) {
            err.error.message = "Connection error: ".concat(err.error.message);
            logger_1.logger.exception(err.error);
        }
        else {
            // Strings or other objects
            logger_1.logger.error(err);
        }
    };
    Cli.prototype.extendProgram = function (program) {
        var _this = this;
        var formatHelp = commander.Help.prototype.formatHelp;
        commander.Help.prototype.formatHelp = function (cmd, helper) {
            return (0, help_1.richFormatHelp)(_this.ansi, formatHelp(cmd, helper));
        };
    };
    Cli.prototype.applyCommonOptions = function (c) {
        c.helpOption('-h, --help', 'Display help for command');
        c.option('--ansi', 'Force ANSI console output (colors, animations)');
        c.option('--no-ansi', 'Do not use ANSI console output (colors, animations)');
        c.option('--debug', 'Output additional debug information');
    };
    Cli.prototype.configureProgram = function (program) {
        var _this = this;
        program.version(packageInfo.version, '-V, --version', 'Output the version number');
        program.addHelpCommand('help [command]', 'Display help for command');
        program.addHelpText('afterAll', (0, help_1.richFormatHelp)(this.ansi, '\nDocumentation:\n' +
            '  You can find detailed documentation about using the Testmo CLI here:\n\n' +
            '  https://docs.testmo.com'));
        program.configureHelp({
            sortSubcommands: true,
            subcommandTerm: function (cmd) { return cmd.name(); }
        });
        this.applyCommonOptions(program);
        program.configureOutput({
            outputError: function (str, write) {
                if (_this.ansi) {
                    write(chalk_1.default.red(str));
                }
                else {
                    write(str);
                }
            }
        });
    };
    Cli.prototype.addSubCommands = function (program, commands) {
        var _this = this;
        var _loop_1 = function (command) {
            var subCommand = command.buildCommand();
            subCommand.description(command.description);
            this_1.applyCommonOptions(subCommand);
            var sections = [];
            var additionalHelpText = [];
            if (command.help.length > 0) {
                sections.push({ name: 'Details', content: command.help });
            }
            if (command.examples.length > 0) {
                sections.push({ name: 'Examples', content: command.examples });
            }
            for (var _a = 0, sections_1 = sections; _a < sections_1.length; _a++) {
                var section = sections_1[_a];
                // Indent lines
                var lines = section.content.split('\n');
                for (var i = 0; i < lines.length; i++) {
                    lines[i] = '  ' + lines[i];
                }
                additionalHelpText.push((0, help_1.richFormatHelp)(this_1.ansi, "\n".concat(section.name, ":\n") + lines.join('\n')));
            }
            if (additionalHelpText.length > 0) {
                subCommand.addHelpText('after', additionalHelpText.join('\n'));
            }
            subCommand.action(function (options, sub) { return __awaiter(_this, void 0, void 0, function () {
                var commonOptions, exitCode, err_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            commonOptions = program.opts();
                            if (!('ansi' in commonOptions)) {
                                commonOptions.ansi = this.ansi;
                            }
                            logger_1.logger.debug("Running command ".concat(command.name));
                            logger_1.logger.debug('Command options', options);
                            logger_1.logger.debug('Common options', commonOptions);
                            return [4 /*yield*/, command.run(options, commonOptions, sub)];
                        case 1:
                            exitCode = _a.sent();
                            if (exitCode !== 0) {
                                logger_1.logger.debug("Exiting with exit code ".concat(exitCode));
                                process.exit(exitCode);
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            err_1 = _a.sent();
                            this.printError(err_1);
                            process.exit(1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
            program.addCommand(subCommand);
        };
        var this_1 = this;
        for (var _i = 0, commands_2 = commands; _i < commands_2.length; _i++) {
            var command = commands_2[_i];
            _loop_1(command);
        }
    };
    Cli.prototype.run = function (args) {
        var _this = this;
        this.ansi = !!process.stdout.isTTY && !(process.env.CI === 'true');
        logger_1.logger.ansi = this.ansi;
        var program = new commander.Command();
        this.extendProgram(program);
        this.configureProgram(program);
        var commands = (0, commands_1.getCommands)();
        this.addSubCommands(program, commands);
        program.on('option:debug', function () {
            logger_1.logger.level = logger_1.LogLevel.Debug;
            logger_1.logger.debug('ANSI output', _this.ansi);
        });
        program.on('option:ansi', function () {
            _this.ansi = true;
            logger_1.logger.ansi = true;
        });
        program.on('option:no-ansi', function () {
            _this.ansi = false;
            logger_1.logger.ansi = false;
        });
        try {
            program.parse(args);
        }
        catch (error) {
            logger_1.logger.exception(error);
            throw error;
        }
    };
    return Cli;
}());
exports.Cli = Cli;
