"use strict";
/*
 * Copyright (c) Testmo GmbH (Berlin, Germany)
 * All rights reserved.
 * contact@testmo.com - www.testmo.com
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resources = void 0;
var fs_1 = __importDefault(require("fs"));
var validator_1 = __importDefault(require("validator"));
var errors_1 = require("../lib/errors");
var validation_1 = require("../lib/validation");
var Resources = /** @class */ (function () {
    function Resources() {
        this.fields = [];
        this.links = [];
        this.artifacts = [];
    }
    Resources.prototype.hasAny = function () {
        return this.fields.length > 0 ||
            this.links.length > 0 ||
            this.artifacts.length > 0;
    };
    Resources.prototype.readFromFile = function (filename) {
        // Load file
        var raw = fs_1.default.readFileSync(filename, 'utf8');
        var resources = JSON.parse(raw);
        // Validate and load fields
        if (Array.isArray(resources.fields)) {
            for (var _i = 0, _a = resources.fields; _i < _a.length; _i++) {
                var loadedField = _a[_i];
                if (!loadedField.type || validator_1.default.isEmpty(loadedField.type)) {
                    throw new errors_1.ValidationError('Missing field type or type empty');
                }
                if (!loadedField.name || validator_1.default.isEmpty(loadedField.name)) {
                    throw new errors_1.ValidationError('Missing field name or empty name');
                }
                if (!('value' in loadedField)) {
                    throw new errors_1.ValidationError('Missing field value');
                }
                if (!validator_1.default.isIn(loadedField.type, ['string', 'url', 'text', 'html', 'console'])) {
                    throw new errors_1.ValidationError('Field type is not a valid type');
                }
                if (loadedField.type == 'url' && 'value' in loadedField &&
                    !(0, validation_1.validateURL)(loadedField.value, { allowLocalhost: true })) {
                    throw new errors_1.ValidationError('Field value is not a valid URL');
                }
                var field = {
                    type: loadedField.type,
                    name: loadedField.name,
                    value: loadedField.value,
                };
                this.fields.push(field);
            }
        }
        // Validate and load links
        if (Array.isArray(resources.links)) {
            for (var _b = 0, _c = resources.links; _b < _c.length; _b++) {
                var loadedLink = _c[_b];
                if (!loadedLink.name || validator_1.default.isEmpty(loadedLink.name)) {
                    throw new errors_1.ValidationError('Missing link name or empty name');
                }
                if (!loadedLink.url || validator_1.default.isEmpty(loadedLink.url)) {
                    throw new errors_1.ValidationError('Missing link URL or empty URL');
                }
                if (!(0, validation_1.validateURL)(loadedLink.url, { allowLocalhost: true })) {
                    throw new errors_1.ValidationError('Link URL is not a valid URL');
                }
                var link = {
                    name: loadedLink.name,
                    url: loadedLink.url,
                };
                if ('note' in loadedLink &&
                    typeof loadedLink.note == 'string' &&
                    !validator_1.default.isEmpty(loadedLink.note)) {
                    link.note = loadedLink.note;
                }
                this.links.push(link);
            }
        }
        // Validate and load artifacts
        if (Array.isArray(resources.artifacts)) {
            for (var _d = 0, _e = resources.artifacts; _d < _e.length; _d++) {
                var loadedArtifact = _e[_d];
                if (!loadedArtifact.name || validator_1.default.isEmpty(loadedArtifact.name)) {
                    throw new errors_1.ValidationError('Missing artifact name or empty name');
                }
                if (!loadedArtifact.url || validator_1.default.isEmpty(loadedArtifact.url)) {
                    throw new errors_1.ValidationError('Missing artifact URL or empty URL');
                }
                if (!(0, validation_1.validateURL)(loadedArtifact.url, { allowLocalhost: true })) {
                    throw new errors_1.ValidationError('Artifact URL is not a valid URL');
                }
                var artifact = {
                    name: loadedArtifact.name,
                    url: loadedArtifact.url,
                };
                if ('note' in loadedArtifact && !validator_1.default.isEmpty(loadedArtifact.note)) {
                    artifact.note = loadedArtifact.note;
                }
                if ('mimeType' in loadedArtifact && !validator_1.default.isEmpty(loadedArtifact.mimeType)) {
                    if (!/^[a-zA-Z0-9]+\/[-+.a-zA-Z0-9]+$/.test(loadedArtifact.mimeType)) {
                        throw new errors_1.ValidationError('Artifact mime type is not a valid mime type');
                    }
                    artifact.mimeType = loadedArtifact.mimeType;
                }
                if ('size' in loadedArtifact) {
                    if (!Number.isInteger(loadedArtifact.size)) {
                        throw new errors_1.ValidationError('Artifact size is not a valid number');
                    }
                    artifact.size = loadedArtifact.size;
                }
                this.artifacts.push(artifact);
            }
        }
    };
    Resources.prototype.writeToFile = function (filename) {
        fs_1.default.writeFileSync(filename, this.generateFileContent());
    };
    Resources.prototype.generateFileContent = function () {
        var content = {};
        if (this.fields.length > 0) {
            content.fields = this.fields;
        }
        if (this.links.length > 0) {
            content.links = this.links;
        }
        if (this.artifacts.length > 0) {
            content.artifacts = this.artifacts;
        }
        return JSON.stringify(content);
    };
    Resources.prototype.addField = function (field) {
        this.fields.push(field);
    };
    Resources.prototype.addLink = function (link) {
        this.links.push(link);
    };
    Resources.prototype.addArtifact = function (artifact) {
        this.artifacts.push(artifact);
    };
    return Resources;
}());
exports.Resources = Resources;
