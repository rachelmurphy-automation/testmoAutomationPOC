"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _AppendToAutomationRun = _interopRequireDefault(require("../model/AppendToAutomationRun"));

var _AppendToAutomationRunThread = _interopRequireDefault(require("../model/AppendToAutomationRunThread"));

var _CompleteAutomationRun = _interopRequireDefault(require("../model/CompleteAutomationRun"));

var _CompleteAutomationRunThread = _interopRequireDefault(require("../model/CompleteAutomationRunThread"));

var _CreateAutomationRun = _interopRequireDefault(require("../model/CreateAutomationRun"));

var _CreateAutomationRunThread = _interopRequireDefault(require("../model/CreateAutomationRunThread"));

var _CreatedAutomationRun = _interopRequireDefault(require("../model/CreatedAutomationRun"));

var _CreatedAutomationRunThread = _interopRequireDefault(require("../model/CreatedAutomationRunThread"));

var _ErrorCollection = _interopRequireDefault(require("../model/ErrorCollection"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
* AutomationRuns service.
* @module api/AutomationRunsApi
* @version 1.0.0
*/
var AutomationRunsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new AutomationRunsApi. 
  * @alias module:api/AutomationRunsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function AutomationRunsApi(apiClient) {
    _classCallCheck(this, AutomationRunsApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Append resources to an automation run
   * Appends test artifacts, fields or links to an existing automation run.
   * @param {Number} automationRunId ID of the automation run.
   * @param {module:model/AppendToAutomationRun} appendToAutomationRun Request object with the properties to append resources to an automation run.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  _createClass(AutomationRunsApi, [{
    key: "appendToWithHttpInfo",
    value: function appendToWithHttpInfo(automationRunId, appendToAutomationRun) {
      var postBody = appendToAutomationRun; // verify the required parameter 'automationRunId' is set

      if (automationRunId === undefined || automationRunId === null) {
        throw new Error("Missing the required parameter 'automationRunId' when calling appendTo");
      } // verify the required parameter 'appendToAutomationRun' is set


      if (appendToAutomationRun === undefined || appendToAutomationRun === null) {
        throw new Error("Missing the required parameter 'appendToAutomationRun' when calling appendTo");
      }

      var pathParams = {
        'automation_run_id': automationRunId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/automation/runs/{automation_run_id}/append', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Append resources to an automation run
     * Appends test artifacts, fields or links to an existing automation run.
     * @param {Number} automationRunId ID of the automation run.
     * @param {module:model/AppendToAutomationRun} appendToAutomationRun Request object with the properties to append resources to an automation run.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "appendTo",
    value: function appendTo(automationRunId, appendToAutomationRun) {
      return this.appendToWithHttpInfo(automationRunId, appendToAutomationRun).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Append resources and test results to a thread
     * Appends test artifacts, fields or test results to an existing thread in an automation run.
     * @param {Number} automationRunThreadId ID of the automation run thread.
     * @param {module:model/AppendToAutomationRunThread} appendToAutomationRunThread Request object with the properties to append resources and test results to an automation run thread.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "appendToThreadWithHttpInfo",
    value: function appendToThreadWithHttpInfo(automationRunThreadId, appendToAutomationRunThread) {
      var postBody = appendToAutomationRunThread; // verify the required parameter 'automationRunThreadId' is set

      if (automationRunThreadId === undefined || automationRunThreadId === null) {
        throw new Error("Missing the required parameter 'automationRunThreadId' when calling appendToThread");
      } // verify the required parameter 'appendToAutomationRunThread' is set


      if (appendToAutomationRunThread === undefined || appendToAutomationRunThread === null) {
        throw new Error("Missing the required parameter 'appendToAutomationRunThread' when calling appendToThread");
      }

      var pathParams = {
        'automation_run_thread_id': automationRunThreadId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/automation/runs/threads/{automation_run_thread_id}/append', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Append resources and test results to a thread
     * Appends test artifacts, fields or test results to an existing thread in an automation run.
     * @param {Number} automationRunThreadId ID of the automation run thread.
     * @param {module:model/AppendToAutomationRunThread} appendToAutomationRunThread Request object with the properties to append resources and test results to an automation run thread.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "appendToThread",
    value: function appendToThread(automationRunThreadId, appendToAutomationRunThread) {
      return this.appendToThreadWithHttpInfo(automationRunThreadId, appendToAutomationRunThread).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Complete an automation run
     * Marks an automation run as completed and closes it for new threads and test results.
     * @param {Number} automationRunId ID of the automation run to complete.
     * @param {module:model/CompleteAutomationRun} completeAutomationRun Request object with the properties to complete an automation run.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "completeWithHttpInfo",
    value: function completeWithHttpInfo(automationRunId, completeAutomationRun) {
      var postBody = completeAutomationRun; // verify the required parameter 'automationRunId' is set

      if (automationRunId === undefined || automationRunId === null) {
        throw new Error("Missing the required parameter 'automationRunId' when calling complete");
      } // verify the required parameter 'completeAutomationRun' is set


      if (completeAutomationRun === undefined || completeAutomationRun === null) {
        throw new Error("Missing the required parameter 'completeAutomationRun' when calling complete");
      }

      var pathParams = {
        'automation_run_id': automationRunId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/automation/runs/{automation_run_id}/complete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Complete an automation run
     * Marks an automation run as completed and closes it for new threads and test results.
     * @param {Number} automationRunId ID of the automation run to complete.
     * @param {module:model/CompleteAutomationRun} completeAutomationRun Request object with the properties to complete an automation run.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "complete",
    value: function complete(automationRunId, completeAutomationRun) {
      return this.completeWithHttpInfo(automationRunId, completeAutomationRun).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Complete a thread in an automation run
     * Marks an automation run thread as completed and closes it for new test results.
     * @param {Number} automationRunThreadId ID of the automation run thread to complete.
     * @param {module:model/CompleteAutomationRunThread} completeAutomationRunThread Request object with the properties to complete an automation run thread.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "completeThreadWithHttpInfo",
    value: function completeThreadWithHttpInfo(automationRunThreadId, completeAutomationRunThread) {
      var postBody = completeAutomationRunThread; // verify the required parameter 'automationRunThreadId' is set

      if (automationRunThreadId === undefined || automationRunThreadId === null) {
        throw new Error("Missing the required parameter 'automationRunThreadId' when calling completeThread");
      } // verify the required parameter 'completeAutomationRunThread' is set


      if (completeAutomationRunThread === undefined || completeAutomationRunThread === null) {
        throw new Error("Missing the required parameter 'completeAutomationRunThread' when calling completeThread");
      }

      var pathParams = {
        'automation_run_thread_id': automationRunThreadId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/api/v1/automation/runs/threads/{automation_run_thread_id}/complete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Complete a thread in an automation run
     * Marks an automation run thread as completed and closes it for new test results.
     * @param {Number} automationRunThreadId ID of the automation run thread to complete.
     * @param {module:model/CompleteAutomationRunThread} completeAutomationRunThread Request object with the properties to complete an automation run thread.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "completeThread",
    value: function completeThread(automationRunThreadId, completeAutomationRunThread) {
      return this.completeThreadWithHttpInfo(automationRunThreadId, completeAutomationRunThread).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Create a new automation run
     * Creates a new automation run in a target project in preparation for adding threads and test results.
     * @param {Number} projectId ID of the target project.
     * @param {module:model/CreateAutomationRun} createAutomationRun Request object with the properties to create a new automation run.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedAutomationRun} and HTTP response
     */

  }, {
    key: "createWithHttpInfo",
    value: function createWithHttpInfo(projectId, createAutomationRun) {
      var postBody = createAutomationRun; // verify the required parameter 'projectId' is set

      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling create");
      } // verify the required parameter 'createAutomationRun' is set


      if (createAutomationRun === undefined || createAutomationRun === null) {
        throw new Error("Missing the required parameter 'createAutomationRun' when calling create");
      }

      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreatedAutomationRun["default"];
      return this.apiClient.callApi('/api/v1/projects/{project_id}/automation/runs', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Create a new automation run
     * Creates a new automation run in a target project in preparation for adding threads and test results.
     * @param {Number} projectId ID of the target project.
     * @param {module:model/CreateAutomationRun} createAutomationRun Request object with the properties to create a new automation run.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedAutomationRun}
     */

  }, {
    key: "create",
    value: function create(projectId, createAutomationRun) {
      return this.createWithHttpInfo(projectId, createAutomationRun).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Create a new automation run thread
     * Creates a new thread in an automation run in preparation for adding test results.
     * @param {Number} automationRunId ID of the target automation run.
     * @param {module:model/CreateAutomationRunThread} createAutomationRunThread Request object with the properties to create a new thread in an automation run.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedAutomationRunThread} and HTTP response
     */

  }, {
    key: "createThreadWithHttpInfo",
    value: function createThreadWithHttpInfo(automationRunId, createAutomationRunThread) {
      var postBody = createAutomationRunThread; // verify the required parameter 'automationRunId' is set

      if (automationRunId === undefined || automationRunId === null) {
        throw new Error("Missing the required parameter 'automationRunId' when calling createThread");
      } // verify the required parameter 'createAutomationRunThread' is set


      if (createAutomationRunThread === undefined || createAutomationRunThread === null) {
        throw new Error("Missing the required parameter 'createAutomationRunThread' when calling createThread");
      }

      var pathParams = {
        'automation_run_id': automationRunId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreatedAutomationRunThread["default"];
      return this.apiClient.callApi('/api/v1/automation/runs/{automation_run_id}/threads', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Create a new automation run thread
     * Creates a new thread in an automation run in preparation for adding test results.
     * @param {Number} automationRunId ID of the target automation run.
     * @param {module:model/CreateAutomationRunThread} createAutomationRunThread Request object with the properties to create a new thread in an automation run.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedAutomationRunThread}
     */

  }, {
    key: "createThread",
    value: function createThread(automationRunId, createAutomationRunThread) {
      return this.createThreadWithHttpInfo(automationRunId, createAutomationRunThread).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return AutomationRunsApi;
}();

exports["default"] = AutomationRunsApi;