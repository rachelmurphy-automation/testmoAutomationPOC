"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _CreateAutomationArtifact = _interopRequireDefault(require("./CreateAutomationArtifact"));

var _CreateAutomationField = _interopRequireDefault(require("./CreateAutomationField"));

var _CreateAutomationLink = _interopRequireDefault(require("./CreateAutomationLink"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The AppendToAutomationRun model module.
 * @module model/AppendToAutomationRun
 * @version 1.0.0
 */
var AppendToAutomationRun = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>AppendToAutomationRun</code>.
   * @alias module:model/AppendToAutomationRun
   */
  function AppendToAutomationRun() {
    _classCallCheck(this, AppendToAutomationRun);

    AppendToAutomationRun.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(AppendToAutomationRun, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>AppendToAutomationRun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppendToAutomationRun} obj Optional instance to populate.
     * @return {module:model/AppendToAutomationRun} The populated <code>AppendToAutomationRun</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new AppendToAutomationRun();

        if (data.hasOwnProperty('artifacts')) {
          obj['artifacts'] = _ApiClient["default"].convertToType(data['artifacts'], [_CreateAutomationArtifact["default"]]);
        }

        if (data.hasOwnProperty('fields')) {
          obj['fields'] = _ApiClient["default"].convertToType(data['fields'], [_CreateAutomationField["default"]]);
        }

        if (data.hasOwnProperty('links')) {
          obj['links'] = _ApiClient["default"].convertToType(data['links'], [_CreateAutomationLink["default"]]);
        }
      }

      return obj;
    }
  }]);

  return AppendToAutomationRun;
}();
/**
 * List of externally stored test artifacts to link to the automation run (such as log files, screenshots or test data).
 * @member {Array.<module:model/CreateAutomationArtifact>} artifacts
 */


AppendToAutomationRun.prototype['artifacts'] = undefined;
/**
 * List of fields to attach to the automation run (such as environment variables, errors or terminal output).
 * @member {Array.<module:model/CreateAutomationField>} fields
 */

AppendToAutomationRun.prototype['fields'] = undefined;
/**
 * List of links to attach to the automation run (such as a link back to the build in the CI tool that triggered the tests).
 * @member {Array.<module:model/CreateAutomationLink>} links
 */

AppendToAutomationRun.prototype['links'] = undefined;
var _default = AppendToAutomationRun;
exports["default"] = _default;