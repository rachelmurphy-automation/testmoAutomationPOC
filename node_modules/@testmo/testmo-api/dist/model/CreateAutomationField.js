"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The CreateAutomationField model module.
 * @module model/CreateAutomationField
 * @version 1.0.0
 */
var CreateAutomationField = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateAutomationField</code>.
   * @alias module:model/CreateAutomationField
   * @param type {module:model/CreateAutomationField.TypeEnum} Type of the field.  Use:  `1` for regular strings  `2` for plain text  `3` for HTML text  `4` for text to display in a terminal/console frame (with a monospaced font)  `5` for URLs
   * @param name {String} Name of the field.
   */
  function CreateAutomationField(type, name) {
    _classCallCheck(this, CreateAutomationField);

    CreateAutomationField.initialize(this, type, name);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CreateAutomationField, null, [{
    key: "initialize",
    value: function initialize(obj, type, name) {
      obj['type'] = type;
      obj['name'] = name;
    }
    /**
     * Constructs a <code>CreateAutomationField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAutomationField} obj Optional instance to populate.
     * @return {module:model/CreateAutomationField} The populated <code>CreateAutomationField</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateAutomationField();

        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'Number');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('value')) {
          obj['value'] = _ApiClient["default"].convertToType(data['value'], 'String');
        }

        if (data.hasOwnProperty('meta')) {
          obj['meta'] = _ApiClient["default"].convertToType(data['meta'], {
            'String': 'String'
          });
        }

        if (data.hasOwnProperty('is_highlight')) {
          obj['is_highlight'] = _ApiClient["default"].convertToType(data['is_highlight'], 'Boolean');
        }
      }

      return obj;
    }
  }]);

  return CreateAutomationField;
}();
/**
 * Type of the field.  Use:  `1` for regular strings  `2` for plain text  `3` for HTML text  `4` for text to display in a terminal/console frame (with a monospaced font)  `5` for URLs
 * @member {module:model/CreateAutomationField.TypeEnum} type
 */


CreateAutomationField.prototype['type'] = undefined;
/**
 * Name of the field.
 * @member {String} name
 */

CreateAutomationField.prototype['name'] = undefined;
/**
 * Value of the field (interpreted as defined by `type`).
 * @member {String} value
 */

CreateAutomationField.prototype['value'] = undefined;
/**
 * Meta fields to attach to the field (to store extra information with a field).
 * @member {Object.<String, String>} meta
 */

CreateAutomationField.prototype['meta'] = undefined;
/**
 * Defines if the field (or related meta fields) are highlighted in the user interface.
 * @member {Boolean} is_highlight
 */

CreateAutomationField.prototype['is_highlight'] = undefined;
/**
 * Allowed values for the <code>type</code> property.
 * @enum {Number}
 * @readonly
 */

CreateAutomationField['TypeEnum'] = {
  /**
   * value: 1
   * @const
   */
  "1": 1,

  /**
   * value: 2
   * @const
   */
  "2": 2,

  /**
   * value: 3
   * @const
   */
  "3": 3,

  /**
   * value: 4
   * @const
   */
  "4": 4,

  /**
   * value: 5
   * @const
   */
  "5": 5
};
var _default = CreateAutomationField;
exports["default"] = _default;