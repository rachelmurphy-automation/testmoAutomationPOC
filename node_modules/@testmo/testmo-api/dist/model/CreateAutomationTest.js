"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _CreateAutomationArtifact = _interopRequireDefault(require("./CreateAutomationArtifact"));

var _CreateAutomationField = _interopRequireDefault(require("./CreateAutomationField"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * The CreateAutomationTest model module.
 * @module model/CreateAutomationTest
 * @version 1.0.0
 */
var CreateAutomationTest = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateAutomationTest</code>.
   * @alias module:model/CreateAutomationTest
   * @param key {String} Key used to identify tests across multiple automation runs (in the context of the same source). Limited to a maximum of 64 lowercase alphanumeric (a-z, 0-9) characters.
   * @param name {String} Name of the test.
   * @param status {String} Alias of the status for the result of the test (for example, `\"failed\"` or `\"passed\"`). The status aliases can be configured in Testmo's administration area.
   * @param folder {String} Fully qualified name of the target folder of the test. Folders can be used to group related tests and usually map to class or type names as defined in the test automation suite. Folders are created (and displayed in Testmo) in the order as submitted.
   */
  function CreateAutomationTest(key, name, status, folder) {
    _classCallCheck(this, CreateAutomationTest);

    CreateAutomationTest.initialize(this, key, name, status, folder);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(CreateAutomationTest, null, [{
    key: "initialize",
    value: function initialize(obj, key, name, status, folder) {
      obj['key'] = key;
      obj['name'] = name;
      obj['status'] = status;
      obj['folder'] = folder;
    }
    /**
     * Constructs a <code>CreateAutomationTest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAutomationTest} obj Optional instance to populate.
     * @return {module:model/CreateAutomationTest} The populated <code>CreateAutomationTest</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateAutomationTest();

        if (data.hasOwnProperty('key')) {
          obj['key'] = _ApiClient["default"].convertToType(data['key'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('status')) {
          obj['status'] = _ApiClient["default"].convertToType(data['status'], 'String');
        }

        if (data.hasOwnProperty('folder')) {
          obj['folder'] = _ApiClient["default"].convertToType(data['folder'], 'String');
        }

        if (data.hasOwnProperty('elapsed')) {
          obj['elapsed'] = _ApiClient["default"].convertToType(data['elapsed'], 'Number');
        }

        if (data.hasOwnProperty('file')) {
          obj['file'] = _ApiClient["default"].convertToType(data['file'], 'String');
        }

        if (data.hasOwnProperty('line')) {
          obj['line'] = _ApiClient["default"].convertToType(data['line'], 'Number');
        }

        if (data.hasOwnProperty('assertions')) {
          obj['assertions'] = _ApiClient["default"].convertToType(data['assertions'], 'Number');
        }

        if (data.hasOwnProperty('artifacts')) {
          obj['artifacts'] = _ApiClient["default"].convertToType(data['artifacts'], [_CreateAutomationArtifact["default"]]);
        }

        if (data.hasOwnProperty('fields')) {
          obj['fields'] = _ApiClient["default"].convertToType(data['fields'], [_CreateAutomationField["default"]]);
        }
      }

      return obj;
    }
  }]);

  return CreateAutomationTest;
}();
/**
 * Key used to identify tests across multiple automation runs (in the context of the same source). Limited to a maximum of 64 lowercase alphanumeric (a-z, 0-9) characters.
 * @member {String} key
 */


CreateAutomationTest.prototype['key'] = undefined;
/**
 * Name of the test.
 * @member {String} name
 */

CreateAutomationTest.prototype['name'] = undefined;
/**
 * Alias of the status for the result of the test (for example, `\"failed\"` or `\"passed\"`). The status aliases can be configured in Testmo's administration area.
 * @member {String} status
 */

CreateAutomationTest.prototype['status'] = undefined;
/**
 * Fully qualified name of the target folder of the test. Folders can be used to group related tests and usually map to class or type names as defined in the test automation suite. Folders are created (and displayed in Testmo) in the order as submitted.
 * @member {String} folder
 */

CreateAutomationTest.prototype['folder'] = undefined;
/**
 * Overall execution time (observed or computed) of the test in microseconds.
 * @member {Number} elapsed
 */

CreateAutomationTest.prototype['elapsed'] = undefined;
/**
 * Name of the file (with or without full path) the test is located in.
 * @member {String} file
 */

CreateAutomationTest.prototype['file'] = undefined;
/**
 * Line number of the test in the given `file`.
 * @member {Number} line
 */

CreateAutomationTest.prototype['line'] = undefined;
/**
 * Number of assertions in the test.
 * @member {Number} assertions
 */

CreateAutomationTest.prototype['assertions'] = undefined;
/**
 * List of externally stored test artifacts to link to the test (such as log files, screenshots or test data).
 * @member {Array.<module:model/CreateAutomationArtifact>} artifacts
 */

CreateAutomationTest.prototype['artifacts'] = undefined;
/**
 * List of fields to attach to the test (such as environment variables, errors or terminal output).
 * @member {Array.<module:model/CreateAutomationField>} fields
 */

CreateAutomationTest.prototype['fields'] = undefined;
var _default = CreateAutomationTest;
exports["default"] = _default;